package Lecture_16.Example_3;

// Главный класс проекта
public class Main {
    public static void main(String[] args) {
        SynchClass synchClass = new SynchClass(0); // Объект класса фабрики

        // Двоим потокам передаётся один и тот же объект
        BuildUnit buildUnit = new BuildUnit(synchClass, 10);
        BuildPylons buildPylons = new BuildPylons(synchClass, 10);

        // Создание и старт потоков
        Thread threadBuiltUnit = new Thread(buildUnit);
        Thread threadBuildPylons = new Thread(buildPylons);
        threadBuiltUnit.start();
        threadBuildPylons.start();
    }
}

/*
Объекты условий

Это объекты класса Condition, которые создаются с помощью метода newCondition() объекта класса, реализующего интерфейс Lock.

Объекты условий следует использовать в случае, когда поток захватил блокировку объекта, но оказалось, что из-за каких-то условий продолжение потока не имеет смысла. В таком случае его можно перевести в режим ожидания выполнения данного условия для разблокировки объекта.

Пример использования объекта условий для синхронизации

Есть класс - фабрика юнитов. Известно, что построение одного юнита требует определённого количества пси (ситуация из игры StarCraft). К этой фабрике могут одновременно обращаться несколько потоков. Один из них строит юниты, тем самым потребляя пси. Другой поток строит пилоны (источники пси), тем самым добавляя пси.

Задача синхронизации: предположим, поток, потребляющий пси, захватил блокировку фабрики, но для построения юнита не хватает пси. Тогда этот поток переводится в режим ожидания для разблокировки объекта (фабрики). Это позволит другому потоку добавить пси и активировать этот поток (строитель).

Такой подход позволит избежать условия взаимной блокировки. К примеру, в наличии 0 пси, при захвате объекта потоком-потребителем в обычных условиях он бы навсегда заблокировал этот объект, так как потоку, который добавляет пси, доступ остался бы закрытым.
 */